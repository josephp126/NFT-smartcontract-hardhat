{
  "address": "0x78e1aFFc9ffE3B19Ae6559059C9dE0d65cF4D022",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ClaimAirdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_MAX_MINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_OG_MAX_MINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_WL_MAX_MINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGprice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGsaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_MINT_PER_TX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLprice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLsaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airdropList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "airdropMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "changeSupplyLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct ERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintOGSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWLSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numberOfOGMintsOnAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numberOfWLMintsOnAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "reserveMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setMaxAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setOGMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setOGMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setOGprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyOG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setPublicMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setWLMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setWLMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "setWLprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAllsaleOn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokenIdOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21d43a9d78198b7b174e2679d57a981e9393dd365ad9b367335b5734dc34f475",
  "receipt": {
    "to": null,
    "from": "0xA225a0BDa21EcC6273221003393fD34bBa317e26",
    "contractAddress": "0x78e1aFFc9ffE3B19Ae6559059C9dE0d65cF4D022",
    "transactionIndex": 15,
    "gasUsed": "3205878",
    "logsBloom": "0x
    "blockHash": "0x9e2e40c0c563f0b0c2de1e3109cb377362785feea36607fffc530d701aafbbfd",
    "transactionHash": "0x21d43a9d78198b7b174e2679d57a981e9393dd365ad9b367335b5734dc34f475",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 10605994,
        "transactionHash": "0x21d43a9d78198b7b174e2679d57a981e9393dd365ad9b367335b5734dc34f475",
        "address": "0x78e1aFFc9ffE3B19Ae6559059C9dE0d65cF4D022",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a225a0bda21ecc6273221003393fd34bba317e26"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x9e2e40c0c563f0b0c2de1e3109cb377362785feea36607fffc530d701aafbbfd"
      }
    ],
    "blockNumber": 10605994,
    "cumulativeGasUsed": "8612991",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "58cd1256ae5f92cf96fc33139ddced37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ClaimAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_OG_MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_WL_MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGsaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_MINT_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLsaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"airdropMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"changeSupplyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintOGSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWLSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfOGMintsOnAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfWLMintsOnAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"reserveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setMaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setOGMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setOGMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setOGprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnlyOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnlyPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setPublicMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setWLMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWLMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setWLprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAllsaleOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIdOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256)\":{\"notice\":\"Public mint\"},\"mintOGSale(uint256,bytes32[])\":{\"notice\":\"OG mint\"},\"mintWLSale(uint256,bytes32[])\":{\"notice\":\"Whitelist mint\"},\"reserveMint(uint256,address)\":{\"notice\":\"Reserve mint for founders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/txtest.sol\":\"TXtest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/txtest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n\\r\\n\\r\\n */\\r\\n\\r\\ncontract TXtest is ERC721A, Ownable, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    mapping(address => uint256) public numberOfWLMintsOnAddress;\\r\\n    mapping(address => uint256) public numberOfOGMintsOnAddress;\\r\\n    mapping(address => uint256) public totalClaimed;\\r\\n    mapping(address => uint256) public airdropList;\\r\\n\\r\\n    //Sale flags\\r\\n    bool public OGsaleActive = false;\\r\\n    bool public WLsaleActive = false;\\r\\n    bool public saleActive = false;\\r\\n\\r\\n    //Mint limits\\r\\n    uint256 public ADDRESS_MAX_MINTS = 12;\\r\\n    uint256 public ADDRESS_OG_MAX_MINTS = 3;\\r\\n    uint256 public ADDRESS_WL_MAX_MINTS = 3;\\r\\n    uint256 public PUBLIC_MINT_PER_TX = 12;\\r\\n\\r\\n    //Supply\\r\\n    uint256 public maxSupply;\\r\\n\\r\\n    //Pricing\\r\\n    uint256 public OGprice = 0.08 ether;\\r\\n    uint256 public WLprice = 0.12 ether;\\r\\n    uint256 public price = 0.18 ether;\\r\\n\\r\\n    //Pre-reveal IPFS link\\r\\n    string private _baseTokenURI = \\\"\\\"; //naming of this seems off?\\r\\n\\r\\n    //Merkle roots\\r\\n    bytes32 public OGMerkleRoot =\\r\\n        0x5ca83a030c01fd6b97579c236835bf3c16ab8ee596f5986d9203ac3c5a37e8f6;\\r\\n    bytes32 public WLMerkleRoot =\\r\\n        0xb962a1d6a53354253b8d3eb626122ca11c747cab1d3f6bdb1395b26359cbb7bc;\\r\\n    //\\tbytes32 private freeClaim; //why private ?\\r\\n\\r\\n    //Payable addresses\\r\\n    address private constant AA_ADDRESS =\\r\\n        0x9bB755DcD634bE970E80f9643ad229a196448878; //why private?\\r\\n    address private constant BB_ADDRESS =\\r\\n        0xDAb2d32Ca6a726f46E4aF1624930c3f1fE07765f;\\r\\n    address private constant CC_ADDRESS =\\r\\n        0x640886117801F6fD8ABBCee14CE568dadb53AEa6;\\r\\n\\r\\n    event Claimed(uint256 count, address sender);\\r\\n    //\\tevent FreeClaimActive(bool live);\\r\\n    event ClaimAirdrop(uint256 count, address sender);\\r\\n    event Airdrop(uint256 count, address sender);\\r\\n\\r\\n    constructor() ERC721A(\\\"TXtest\\\", \\\"TXTEST\\\") {}\\r\\n\\r\\n    /**\\r\\n     * OG mint\\r\\n     */\\r\\n    function mintOGSale(uint256 numberOfMints, bytes32[] calldata _merkleProof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(OGsaleActive, \\\"OG Presale must be active to mint\\\");\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                OGMerkleRoot,\\r\\n                keccak256(abi.encodePacked(msg.sender))\\r\\n            ),\\r\\n            \\\"Invalid OG proof - Caller not on OG whitelisted\\\"\\r\\n        );\\r\\n\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint zero token\\\"); //optional: this is a general check for all mint functions that can be factor out into a separate internal mint function\\r\\n\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        ); //optional: this is a general check for all mint functions that can be factor out into a separate internal mint function\\r\\n\\r\\n        require(\\r\\n            numberOfOGMintsOnAddress[msg.sender] + numberOfMints <=\\r\\n                ADDRESS_OG_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than their whitelist amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"This would exceed the max number of mints allowed\\\"\\r\\n        ); //optional: this is a general check for all mint functions that can be factor out into a separate internal mint function\\r\\n        require(\\r\\n            msg.value >= numberOfMints * OGprice,\\r\\n            \\\"Not enough ether to mint\\\"\\r\\n        );\\r\\n\\r\\n        numberOfOGMintsOnAddress[msg.sender] += numberOfMints;\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Whitelist mint\\r\\n     */\\r\\n    function mintWLSale(uint256 numberOfMints, bytes32[] calldata _merkleProof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(WLsaleActive, \\\"Sale must be active to mint\\\");\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                WLMerkleRoot,\\r\\n                keccak256(abi.encodePacked(msg.sender))\\r\\n            ),\\r\\n            \\\"Invalid proof - Caller not whitelisted\\\"\\r\\n        );\\r\\n\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint none\\\");\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfWLMintsOnAddress[msg.sender] + numberOfMints <=\\r\\n                ADDRESS_WL_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than their whitelist amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"Mint would exceed max supply of mints\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= numberOfMints * WLprice,\\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        numberOfWLMintsOnAddress[msg.sender] += numberOfMints;\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public mint\\r\\n     */\\r\\n    function mint(uint256 numberOfMints) external payable {\\r\\n        require(saleActive, \\\"Public sale must be active to mint\\\");\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint none\\\");\\r\\n        require(\\r\\n            numberOfMints <= PUBLIC_MINT_PER_TX,\\r\\n            \\\"Sender is trying to mint too many in a single transaction\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"Mint would exceed max supply of mints\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= numberOfMints * price,\\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Reserve mint for founders\\r\\n     */\\r\\n\\r\\n    function reserveMint(uint256 quantity, address _recipient)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(quantity > 0, \\\"Need to mint more than 0\\\");\\r\\n\\r\\n        _safeMint(_recipient, quantity);\\r\\n    }\\r\\n\\r\\n    function addAirdrop(address user, uint256 amount) external onlyOwner {\\r\\n        airdropList[user] += amount;\\r\\n        emit Airdrop(amount, user);\\r\\n    }\\r\\n\\r\\n    function airdropMint(uint256 quantity, address _recipient)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(quantity > 0, \\\"Need to mint more than 0\\\");\\r\\n\\r\\n        _safeMint(_recipient, quantity);\\r\\n    }\\r\\n\\r\\n    //SETTERS FOR SALE PHASES\\r\\n    function setOnlyOG() public onlyOwner {\\r\\n        OGsaleActive = true;\\r\\n        WLsaleActive = false;\\r\\n        saleActive = false;\\r\\n    }\\r\\n\\r\\n    function setOnlyWhitelisted() public onlyOwner {\\r\\n        OGsaleActive = false;\\r\\n        WLsaleActive = true;\\r\\n        saleActive = false;\\r\\n    }\\r\\n\\r\\n    function setOnlyPublicSale() public onlyOwner {\\r\\n        OGsaleActive = false;\\r\\n        WLsaleActive = false;\\r\\n        saleActive = true;\\r\\n    }\\r\\n\\r\\n    function toggleSaleOff() external onlyOwner {\\r\\n        OGsaleActive = false;\\r\\n        WLsaleActive = false;\\r\\n        saleActive = false;\\r\\n    }\\r\\n\\r\\n    function toggleAllsaleOn() external onlyOwner {\\r\\n        OGsaleActive = true;\\r\\n        WLsaleActive = true;\\r\\n        saleActive = true;\\r\\n    }\\r\\n\\r\\n    function setOGMerkleRoot(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        OGMerkleRoot = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setWLMerkleRoot(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        WLMerkleRoot = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function _verifyWhitelist(address _user, bytes32[] calldata _merkleProof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_user));\\r\\n        return MerkleProof.verify(_merkleProof, WLMerkleRoot, leaf); //this seems to be duplicate\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner nonReentrant {\\r\\n        require(address(this).balance > 0, \\\"No balance to withdraw\\\");\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n\\r\\n        _withdraw(AA_ADDRESS, (contractBalance * 19) / 100);\\r\\n        _withdraw(BB_ADDRESS, (contractBalance * 19) / 100);\\r\\n        _withdraw(CC_ADDRESS, (contractBalance));\\r\\n    }\\r\\n\\r\\n    function _withdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function tokenIdOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 tokenCount = totalSupply();\\r\\n\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        uint256 arrayIndex;\\r\\n        for (uint256 i; i < tokenCount; i++) {\\r\\n            TokenOwnership memory owner = _ownershipOf(i);\\r\\n            if (owner.addr == _owner) {\\r\\n                tokensId[arrayIndex] = i;\\r\\n                arrayIndex++;\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To change the starting tokenId, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    // withdraw all funds to owners address\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    //change the supply limit\\r\\n    function changeSupplyLimit(uint256 _new) external onlyOwner {\\r\\n        maxSupply = _new;\\r\\n    }\\r\\n\\r\\n    //set public mint price\\r\\n    function setOGprice(uint256 _new) external onlyOwner {\\r\\n        OGprice = _new;\\r\\n    }\\r\\n\\r\\n    function setWLprice(uint256 _new) external onlyOwner {\\r\\n        WLprice = _new;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 _new) external onlyOwner {\\r\\n        price = _new;\\r\\n    }\\r\\n\\r\\n    function setMaxAddress(uint256 _new) external onlyOwner {\\r\\n        ADDRESS_MAX_MINTS = _new;\\r\\n    }\\r\\n\\r\\n    function setOGMax(uint256 _new) external onlyOwner {\\r\\n        ADDRESS_OG_MAX_MINTS = _new;\\r\\n    }\\r\\n\\r\\n    function setWLMax(uint256 _new) external onlyOwner {\\r\\n        ADDRESS_WL_MAX_MINTS = _new;\\r\\n    }\\r\\n\\r\\n    function setPublicMax(uint256 _new) external onlyOwner {\\r\\n        PUBLIC_MINT_PER_TX = _new;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc4799a193a907ccee1213a0b84b86282601a551141148092719df8e13698de28\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4fc71126b4ddba95744cf178a3090854107d85c3c9a764f03af29dc17682dafa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600e805462ffffff19169055600c600f8190556003601081905560115560125567011c37937e0800006014556701aa535d3d0c000060155567027f7d0bdb92000060165560a06040819052600060808190526200005f9160179162000192565b507f5ca83a030c01fd6b97579c236835bf3c16ab8ee596f5986d9203ac3c5a37e8f66018557fb962a1d6a53354253b8d3eb626122ca11c747cab1d3f6bdb1395b26359cbb7bc601955348015620000b557600080fd5b506040518060400160405280600681526020016515161d195cdd60d21b815250604051806040016040528060068152602001651516151154d560d21b81525081600290805190602001906200010c92919062000192565b5080516200012290600390602084019062000192565b5050600160005550620001353362000140565b600160095562000275565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a09062000238565b90600052602060002090601f016020900481019282620001c457600085556200020f565b82601f10620001df57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020f578251825591602001919060010190620001f2565b506200021d92915062000221565b5090565b5b808211156200021d576000815560010162000222565b600181811c908216806200024d57607f821691505b602082108114156200026f57634e487b7160e01b600052602260045260246000fd5b50919050565b61332580620002856000396000f3fe6080604052600436106103a25760003560e01c80637d44fd11116101e7578063bee1f2b91161010d578063dc33e681116100a0578063f2fde38b1161006f578063f2fde38b14610a89578063f4a0a52814610aa9578063f6de979d14610ac9578063fd62860f14610ae957600080fd5b8063dc33e681146109dd578063e3979508146109fd578063e985e9c514610a13578063ef5d9ae814610a5c57600080fd5b8063d44e3573116100dc578063d44e357314610965578063d5abeb0114610985578063da87741b1461099b578063db2e21bc146109c857600080fd5b8063bee1f2b9146108f6578063c0054ac11461090b578063c4fc42461461092b578063c87b56dd1461094557600080fd5b8063936d6e5011610185578063a22cb46511610154578063a22cb4651461088d578063a3a53ccb146108ad578063aea48328146108c0578063b88d4fde146108d657600080fd5b8063936d6e501461082f57806395d89b411461084f578063a035b1fe14610864578063a0712d681461087a57600080fd5b80638babe766116101c15780638babe7661461078e5780638da5cb5b146107a4578063908d04f1146107c25780639231ab2a146107d857600080fd5b80637d44fd11146107435780637eedcfd01461076357806383df8d8d1461077857600080fd5b806343d0d356116102cc578063630551271161026a57806368428a1b1161023957806368428a1b146106d95780636f981811146106f957806370a082311461070e578063715018a61461072e57600080fd5b806363055127146106635780636352211e1461067957806363665f2e1461069957806366566046146106b957600080fd5b806358cf77fa116102a657806358cf77fa146105f65780635d579a09146106235780635ec9208a1461063657806360b02f701461045857600080fd5b806343d0d356146105945780634ca9d7d6146105c157806355f804b3146105d657600080fd5b806318f34b0f11610344578063295e4c3311610313578063295e4c331461052a5780633c9350f81461053f5780633ccfd60b1461055f57806342842e0e1461057457600080fd5b806318f34b0f146104be578063207e2173146104d457806323b872dd146104ea57806325c2c0201461050a57600080fd5b8063095ea7b311610380578063095ea7b31461043657806311c1907c14610458578063142109ed1461047857806318160ddd1461049757600080fd5b806301ffc9a7146103a757806306fdde03146103dc578063081812fc146103fe575b600080fd5b3480156103b357600080fd5b506103c76103c2366004612f50565b610b09565b60405190151581526020015b60405180910390f35b3480156103e857600080fd5b506103f1610b5b565b6040516103d3919061316c565b34801561040a57600080fd5b5061041e610419366004612f38565b610bed565b6040516001600160a01b0390911681526020016103d3565b34801561044257600080fd5b50610456610451366004612f0f565b610c31565b005b34801561046457600080fd5b50610456610473366004612ff5565b610cbf565b34801561048457600080fd5b50600e546103c790610100900460ff1681565b3480156104a357600080fd5b5060015460005403600019015b6040519081526020016103d3565b3480156104ca57600080fd5b506104b0600f5481565b3480156104e057600080fd5b506104b060115481565b3480156104f657600080fd5b50610456610505366004612dc5565b610d6a565b34801561051657600080fd5b50610456610525366004612f38565b610d75565b34801561053657600080fd5b50610456610dc2565b34801561054b57600080fd5b5061045661055a366004612f38565b610e1c565b34801561056b57600080fd5b50610456610e69565b34801561058057600080fd5b5061045661058f366004612dc5565b610fd6565b3480156105a057600080fd5b506104b06105af366004612d79565b600a6020526000908152604090205481565b3480156105cd57600080fd5b50610456610ff1565b3480156105e257600080fd5b506104566105f1366004612f88565b611047565b34801561060257600080fd5b506104b0610611366004612d79565b600d6020526000908152604090205481565b610456610631366004613017565b61109b565b34801561064257600080fd5b506104b0610651366004612d79565b600b6020526000908152604090205481565b34801561066f57600080fd5b506104b060125481565b34801561068557600080fd5b5061041e610694366004612f38565b611428565b3480156106a557600080fd5b506104566106b4366004612f0f565b61143a565b3480156106c557600080fd5b506104566106d4366004612f38565b6114f4565b3480156106e557600080fd5b50600e546103c79062010000900460ff1681565b34801561070557600080fd5b50610456611541565b34801561071a57600080fd5b506104b0610729366004612d79565b61159c565b34801561073a57600080fd5b506104566115eb565b34801561074f57600080fd5b5061045661075e366004612f38565b61163f565b34801561076f57600080fd5b5061045661168c565b34801561078457600080fd5b506104b060185481565b34801561079a57600080fd5b506104b060145481565b3480156107b057600080fd5b506008546001600160a01b031661041e565b3480156107ce57600080fd5b506104b060105481565b3480156107e457600080fd5b506107f86107f3366004612f38565b6116e7565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff1690820152918101511515908201526060016103d3565b34801561083b57600080fd5b5061045661084a366004612f38565b61170d565b34801561085b57600080fd5b506103f161175a565b34801561087057600080fd5b506104b060165481565b610456610888366004612f38565b611769565b34801561089957600080fd5b506104566108a8366004612ed5565b6119f5565b6104566108bb366004613017565b611a8b565b3480156108cc57600080fd5b506104b060195481565b3480156108e257600080fd5b506104566108f1366004612e00565b611e31565b34801561090257600080fd5b50610456611e82565b34801561091757600080fd5b50610456610926366004612f38565b611edb565b34801561093757600080fd5b50600e546103c79060ff1681565b34801561095157600080fd5b506103f1610960366004612f38565b611f28565b34801561097157600080fd5b50610456610980366004612f38565b611fad565b34801561099157600080fd5b506104b060135481565b3480156109a757600080fd5b506109bb6109b6366004612d79565b611ffa565b6040516103d39190613128565b3480156109d457600080fd5b506104566120ec565b3480156109e957600080fd5b506104b06109f8366004612d79565b61216d565b348015610a0957600080fd5b506104b060155481565b348015610a1f57600080fd5b506103c7610a2e366004612d93565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610a6857600080fd5b506104b0610a77366004612d79565b600c6020526000908152604090205481565b348015610a9557600080fd5b50610456610aa4366004612d79565b6121a1565b348015610ab557600080fd5b50610456610ac4366004612f38565b612257565b348015610ad557600080fd5b50610456610ae4366004612f38565b6122a4565b348015610af557600080fd5b50610456610b04366004612f38565b6122f1565b60006001600160e01b031982166380ac58cd60e01b1480610b3a57506001600160e01b03198216635b5e139f60e01b145b80610b5557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610b6a9061320d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061320d565b8015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b5050505050905090565b6000610bf88261233e565b610c15576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c3c82611428565b9050806001600160a01b0316836001600160a01b03161415610c715760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610c915750610c8f8133610a2e565b155b15610caf576040516367d9dca160e11b815260040160405180910390fd5b610cba838383612377565b505050565b6008546001600160a01b03163314610d0c5760405162461bcd60e51b815260206004820181905260248201526000805160206132d083398151915260448201526064015b60405180910390fd5b60008211610d5c5760405162461bcd60e51b815260206004820152601860248201527f4e65656420746f206d696e74206d6f7265207468616e203000000000000000006044820152606401610d03565b610d6681836123e0565b5050565b610cba8383836123fa565b6008546001600160a01b03163314610dbd5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601855565b6008546001600160a01b03163314610e0a5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff1916610100179055565b6008546001600160a01b03163314610e645760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601155565b6008546001600160a01b03163314610eb15760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b60026009541415610f045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d03565b600260095547610f565760405162461bcd60e51b815260206004820152601660248201527f4e6f2062616c616e636520746f207769746864726177000000000000000000006044820152606401610d03565b47610f8b739bb755dcd634be970e80f9643ad229a1964488786064610f7c8460136131ab565b610f869190613197565b6125ea565b610fb073dab2d32ca6a726f46e4af1624930c3f1fe07765f6064610f7c8460136131ab565b610fce73640886117801f6fd8abbcee14ce568dadb53aea6826125ea565b506001600955565b610cba83838360405180602001604052806000815250611e31565b6008546001600160a01b031633146110395760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff19169055565b6008546001600160a01b0316331461108f5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b610cba60178383612cc4565b600e54610100900460ff166110f25760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d03565b611168828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506019546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b6040516020818303038152906040528051906020012061268d565b6111c35760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d03565b600083116112135760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d03565b600f54836112203361216d565b61122a919061317f565b11156112945760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b601154336000908152600a60205260409020546112b290859061317f565b11156113265760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d03565b6013546001546000548591900360001901611341919061317f565b111561139d5760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d03565b6015546113aa90846131ab565b3410156113f95760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d03565b336000908152600a60205260408120805485929061141890849061317f565b90915550610cba905033846123e0565b6000611433826126a3565b5192915050565b6008546001600160a01b031633146114825760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6001600160a01b0382166000908152600d6020526040812080548392906114aa90849061317f565b9091555050604080518281526001600160a01b03841660208201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a15050565b6008546001600160a01b0316331461153c5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601255565b6008546001600160a01b031633146115895760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff191662010101179055565b60006001600160a01b0382166115c5576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6008546001600160a01b031633146116335760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b61163d60006127cc565b565b6008546001600160a01b031633146116875760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601955565b6008546001600160a01b031633146116d45760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff191662010000179055565b6040805160608101825260008082526020820181905291810191909152610b55826126a3565b6008546001600160a01b031633146117555760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601055565b606060038054610b6a9061320d565b600e5462010000900460ff166117cc5760405162461bcd60e51b815260206004820152602260248201527f5075626c69632073616c65206d7573742062652061637469766520746f206d696044820152611b9d60f21b6064820152608401610d03565b6000811161181c5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d03565b6012548111156118945760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e7420746f6f206d616e60448201527f7920696e20612073696e676c65207472616e73616374696f6e000000000000006064820152608401610d03565b600f54816118a13361216d565b6118ab919061317f565b11156119155760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b6013546001546000548391900360001901611930919061317f565b111561198c5760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d03565b60165461199990826131ab565b3410156119e85760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d03565b6119f233826123e0565b50565b6001600160a01b038216331415611a1f5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600e5460ff16611ae75760405162461bcd60e51b815260206004820152602160248201527f4f472050726573616c65206d7573742062652061637469766520746f206d696e6044820152601d60fa1b6064820152608401610d03565b611b46828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506018546040516bffffffffffffffffffffffff193360601b166020820152909250603401905061114d565b611bb85760405162461bcd60e51b815260206004820152602f60248201527f496e76616c6964204f472070726f6f66202d2043616c6c6572206e6f74206f6e60448201527f204f472077686974656c697374656400000000000000000000000000000000006064820152608401610d03565b60008311611c145760405162461bcd60e51b815260206004820152602360248201527f53656e64657220697320747279696e6720746f206d696e74207a65726f20746f60448201526235b2b760e91b6064820152608401610d03565b600f5483611c213361216d565b611c2b919061317f565b1115611c955760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b601054336000908152600b6020526040902054611cb390859061317f565b1115611d275760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d03565b6013546001546000548591900360001901611d42919061317f565b1115611db65760405162461bcd60e51b815260206004820152603160248201527f5468697320776f756c642065786365656420746865206d6178206e756d62657260448201527f206f66206d696e747320616c6c6f7765640000000000000000000000000000006064820152608401610d03565b601454611dc390846131ab565b341015611e125760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820657468657220746f206d696e7400000000000000006044820152606401610d03565b336000908152600b60205260408120805485929061141890849061317f565b611e3c8484846123fa565b6001600160a01b0383163b15158015611e5e5750611e5c8484848461282b565b155b15611e7c576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6008546001600160a01b03163314611eca5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff19166001179055565b6008546001600160a01b03163314611f235760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601555565b6060611f338261233e565b611f5057604051630a14c4b560e41b815260040160405180910390fd5b6000611f5a612923565b9050805160001415611f7b5760405180602001604052806000815250611fa6565b80611f8584612932565b604051602001611f969291906130bd565b6040516020818303038152906040525b9392505050565b6008546001600160a01b03163314611ff55760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601355565b60015460008054606092600019910301908167ffffffffffffffff81111561203257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561205b578160200160208202803683370190505b5090506000805b838110156120e2576000612075826126a3565b9050866001600160a01b031681600001516001600160a01b031614156120cf57818484815181106120b657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826120cb81613248565b9350505b50806120da81613248565b915050612062565b5090949350505050565b6008546001600160a01b031633146121345760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6008546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156119f2573d6000803e3d6000fd5b6001600160a01b03811660009081526005602052604081205468010000000000000000900467ffffffffffffffff16610b55565b6008546001600160a01b031633146121e95760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6001600160a01b03811661224e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d03565b6119f2816127cc565b6008546001600160a01b0316331461229f5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601655565b6008546001600160a01b031633146122ec5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600f55565b6008546001600160a01b031633146123395760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601455565b600081600111158015612352575060005482105b8015610b55575050600090815260046020526040902054600160e01b900460ff161590565b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610d66828260405180602001604052806000815250612a64565b6000612405826126a3565b9050836001600160a01b031681600001516001600160a01b03161461243c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061245a575061245a8533610a2e565b8061247557503361246a84610bed565b6001600160a01b0316145b90508061249557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166124bc57604051633a954ecd60e21b815260040160405180910390fd5b6124c860008487612377565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661259e57600054821461259e578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612637576040519150601f19603f3d011682016040523d82523d6000602084013e61263c565b606091505b5050905080610cba5760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610d03565b60008261269a8584612a71565b14949350505050565b604080516060810182526000808252602082018190529181019190915281806001111580156126d3575060005481105b156127b357600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161515918101829052906127b15780516001600160a01b031615612747579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff16151592810192909252156127ac579392505050565b612747565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906128609033908990889088906004016130ec565b602060405180830381600087803b15801561287a57600080fd5b505af19250505080156128aa575060408051601f3d908101601f191682019092526128a791810190612f6c565b60015b612905573d8080156128d8576040519150601f19603f3d011682016040523d82523d6000602084013e6128dd565b606091505b5080516128fd576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606060178054610b6a9061320d565b6060816129565750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612980578061296a81613248565b91506129799050600a83613197565b915061295a565b60008167ffffffffffffffff8111156129a957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156129d3576020820181803683370190505b5090505b841561291b576129e86001836131ca565b91506129f5600a86613263565b612a0090603061317f565b60f81b818381518110612a2357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612a5d600a86613197565b94506129d7565b610cba8383836001612af3565b600081815b8451811015612aeb576000858281518110612aa157634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311612ac75760008381526020829052604090209250612ad8565b600081815260208490526040902092505b5080612ae381613248565b915050612a76565b509392505050565b6000546001600160a01b038516612b1c57604051622e076360e81b815260040160405180910390fd5b83612b3a5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015612bec57506001600160a01b0387163b15155b15612c75575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612c3d600088848060010195508861282b565b612c5a576040516368d2bf6b60e11b815260040160405180910390fd5b80821415612bf2578260005414612c7057600080fd5b612cbb565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415612c76575b506000556125e3565b828054612cd09061320d565b90600052602060002090601f016020900481019282612cf25760008555612d38565b82601f10612d0b5782800160ff19823516178555612d38565b82800160010185558215612d38579182015b82811115612d38578235825591602001919060010190612d1d565b50612d44929150612d48565b5090565b5b80821115612d445760008155600101612d49565b80356001600160a01b0381168114612d7457600080fd5b919050565b600060208284031215612d8a578081fd5b611fa682612d5d565b60008060408385031215612da5578081fd5b612dae83612d5d565b9150612dbc60208401612d5d565b90509250929050565b600080600060608486031215612dd9578081fd5b612de284612d5d565b9250612df060208501612d5d565b9150604084013590509250925092565b60008060008060808587031215612e15578081fd5b612e1e85612d5d565b9350612e2c60208601612d5d565b925060408501359150606085013567ffffffffffffffff80821115612e4f578283fd5b818701915087601f830112612e62578283fd5b813581811115612e7457612e746132a3565b604051601f8201601f19908116603f01168101908382118183101715612e9c57612e9c6132a3565b816040528281528a6020848701011115612eb4578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612ee7578182fd5b612ef083612d5d565b915060208301358015158114612f04578182fd5b809150509250929050565b60008060408385031215612f21578182fd5b612f2a83612d5d565b946020939093013593505050565b600060208284031215612f49578081fd5b5035919050565b600060208284031215612f61578081fd5b8135611fa6816132b9565b600060208284031215612f7d578081fd5b8151611fa6816132b9565b60008060208385031215612f9a578182fd5b823567ffffffffffffffff80821115612fb1578384fd5b818501915085601f830112612fc4578384fd5b813581811115612fd2578485fd5b866020828501011115612fe3578485fd5b60209290920196919550909350505050565b60008060408385031215613007578182fd5b82359150612dbc60208401612d5d565b60008060006040848603121561302b578283fd5b83359250602084013567ffffffffffffffff80821115613049578384fd5b818601915086601f83011261305c578384fd5b81358181111561306a578485fd5b8760208260051b850101111561307e578485fd5b6020830194508093505050509250925092565b600081518084526130a98160208601602086016131e1565b601f01601f19169290920160200192915050565b600083516130cf8184602088016131e1565b8351908301906130e38183602088016131e1565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261311e6080830184613091565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561316057835183529284019291840191600101613144565b50909695505050505050565b602081526000611fa66020830184613091565b6000821982111561319257613192613277565b500190565b6000826131a6576131a661328d565b500490565b60008160001904831182151516156131c5576131c5613277565b500290565b6000828210156131dc576131dc613277565b500390565b60005b838110156131fc5781810151838201526020016131e4565b83811115611e7c5750506000910152565b600181811c9082168061322157607f821691505b6020821081141561324257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561325c5761325c613277565b5060010190565b6000826132725761327261328d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146119f257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b3268a135dfe1a77a28d32e899801633ae4f4e2c6b5f38e4014527a85f1167ee64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103a25760003560e01c80637d44fd11116101e7578063bee1f2b91161010d578063dc33e681116100a0578063f2fde38b1161006f578063f2fde38b14610a89578063f4a0a52814610aa9578063f6de979d14610ac9578063fd62860f14610ae957600080fd5b8063dc33e681146109dd578063e3979508146109fd578063e985e9c514610a13578063ef5d9ae814610a5c57600080fd5b8063d44e3573116100dc578063d44e357314610965578063d5abeb0114610985578063da87741b1461099b578063db2e21bc146109c857600080fd5b8063bee1f2b9146108f6578063c0054ac11461090b578063c4fc42461461092b578063c87b56dd1461094557600080fd5b8063936d6e5011610185578063a22cb46511610154578063a22cb4651461088d578063a3a53ccb146108ad578063aea48328146108c0578063b88d4fde146108d657600080fd5b8063936d6e501461082f57806395d89b411461084f578063a035b1fe14610864578063a0712d681461087a57600080fd5b80638babe766116101c15780638babe7661461078e5780638da5cb5b146107a4578063908d04f1146107c25780639231ab2a146107d857600080fd5b80637d44fd11146107435780637eedcfd01461076357806383df8d8d1461077857600080fd5b806343d0d356116102cc578063630551271161026a57806368428a1b1161023957806368428a1b146106d95780636f981811146106f957806370a082311461070e578063715018a61461072e57600080fd5b806363055127146106635780636352211e1461067957806363665f2e1461069957806366566046146106b957600080fd5b806358cf77fa116102a657806358cf77fa146105f65780635d579a09146106235780635ec9208a1461063657806360b02f701461045857600080fd5b806343d0d356146105945780634ca9d7d6146105c157806355f804b3146105d657600080fd5b806318f34b0f11610344578063295e4c3311610313578063295e4c331461052a5780633c9350f81461053f5780633ccfd60b1461055f57806342842e0e1461057457600080fd5b806318f34b0f146104be578063207e2173146104d457806323b872dd146104ea57806325c2c0201461050a57600080fd5b8063095ea7b311610380578063095ea7b31461043657806311c1907c14610458578063142109ed1461047857806318160ddd1461049757600080fd5b806301ffc9a7146103a757806306fdde03146103dc578063081812fc146103fe575b600080fd5b3480156103b357600080fd5b506103c76103c2366004612f50565b610b09565b60405190151581526020015b60405180910390f35b3480156103e857600080fd5b506103f1610b5b565b6040516103d3919061316c565b34801561040a57600080fd5b5061041e610419366004612f38565b610bed565b6040516001600160a01b0390911681526020016103d3565b34801561044257600080fd5b50610456610451366004612f0f565b610c31565b005b34801561046457600080fd5b50610456610473366004612ff5565b610cbf565b34801561048457600080fd5b50600e546103c790610100900460ff1681565b3480156104a357600080fd5b5060015460005403600019015b6040519081526020016103d3565b3480156104ca57600080fd5b506104b0600f5481565b3480156104e057600080fd5b506104b060115481565b3480156104f657600080fd5b50610456610505366004612dc5565b610d6a565b34801561051657600080fd5b50610456610525366004612f38565b610d75565b34801561053657600080fd5b50610456610dc2565b34801561054b57600080fd5b5061045661055a366004612f38565b610e1c565b34801561056b57600080fd5b50610456610e69565b34801561058057600080fd5b5061045661058f366004612dc5565b610fd6565b3480156105a057600080fd5b506104b06105af366004612d79565b600a6020526000908152604090205481565b3480156105cd57600080fd5b50610456610ff1565b3480156105e257600080fd5b506104566105f1366004612f88565b611047565b34801561060257600080fd5b506104b0610611366004612d79565b600d6020526000908152604090205481565b610456610631366004613017565b61109b565b34801561064257600080fd5b506104b0610651366004612d79565b600b6020526000908152604090205481565b34801561066f57600080fd5b506104b060125481565b34801561068557600080fd5b5061041e610694366004612f38565b611428565b3480156106a557600080fd5b506104566106b4366004612f0f565b61143a565b3480156106c557600080fd5b506104566106d4366004612f38565b6114f4565b3480156106e557600080fd5b50600e546103c79062010000900460ff1681565b34801561070557600080fd5b50610456611541565b34801561071a57600080fd5b506104b0610729366004612d79565b61159c565b34801561073a57600080fd5b506104566115eb565b34801561074f57600080fd5b5061045661075e366004612f38565b61163f565b34801561076f57600080fd5b5061045661168c565b34801561078457600080fd5b506104b060185481565b34801561079a57600080fd5b506104b060145481565b3480156107b057600080fd5b506008546001600160a01b031661041e565b3480156107ce57600080fd5b506104b060105481565b3480156107e457600080fd5b506107f86107f3366004612f38565b6116e7565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff1690820152918101511515908201526060016103d3565b34801561083b57600080fd5b5061045661084a366004612f38565b61170d565b34801561085b57600080fd5b506103f161175a565b34801561087057600080fd5b506104b060165481565b610456610888366004612f38565b611769565b34801561089957600080fd5b506104566108a8366004612ed5565b6119f5565b6104566108bb366004613017565b611a8b565b3480156108cc57600080fd5b506104b060195481565b3480156108e257600080fd5b506104566108f1366004612e00565b611e31565b34801561090257600080fd5b50610456611e82565b34801561091757600080fd5b50610456610926366004612f38565b611edb565b34801561093757600080fd5b50600e546103c79060ff1681565b34801561095157600080fd5b506103f1610960366004612f38565b611f28565b34801561097157600080fd5b50610456610980366004612f38565b611fad565b34801561099157600080fd5b506104b060135481565b3480156109a757600080fd5b506109bb6109b6366004612d79565b611ffa565b6040516103d39190613128565b3480156109d457600080fd5b506104566120ec565b3480156109e957600080fd5b506104b06109f8366004612d79565b61216d565b348015610a0957600080fd5b506104b060155481565b348015610a1f57600080fd5b506103c7610a2e366004612d93565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610a6857600080fd5b506104b0610a77366004612d79565b600c6020526000908152604090205481565b348015610a9557600080fd5b50610456610aa4366004612d79565b6121a1565b348015610ab557600080fd5b50610456610ac4366004612f38565b612257565b348015610ad557600080fd5b50610456610ae4366004612f38565b6122a4565b348015610af557600080fd5b50610456610b04366004612f38565b6122f1565b60006001600160e01b031982166380ac58cd60e01b1480610b3a57506001600160e01b03198216635b5e139f60e01b145b80610b5557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610b6a9061320d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061320d565b8015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b5050505050905090565b6000610bf88261233e565b610c15576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c3c82611428565b9050806001600160a01b0316836001600160a01b03161415610c715760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610c915750610c8f8133610a2e565b155b15610caf576040516367d9dca160e11b815260040160405180910390fd5b610cba838383612377565b505050565b6008546001600160a01b03163314610d0c5760405162461bcd60e51b815260206004820181905260248201526000805160206132d083398151915260448201526064015b60405180910390fd5b60008211610d5c5760405162461bcd60e51b815260206004820152601860248201527f4e65656420746f206d696e74206d6f7265207468616e203000000000000000006044820152606401610d03565b610d6681836123e0565b5050565b610cba8383836123fa565b6008546001600160a01b03163314610dbd5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601855565b6008546001600160a01b03163314610e0a5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff1916610100179055565b6008546001600160a01b03163314610e645760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601155565b6008546001600160a01b03163314610eb15760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b60026009541415610f045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d03565b600260095547610f565760405162461bcd60e51b815260206004820152601660248201527f4e6f2062616c616e636520746f207769746864726177000000000000000000006044820152606401610d03565b47610f8b739bb755dcd634be970e80f9643ad229a1964488786064610f7c8460136131ab565b610f869190613197565b6125ea565b610fb073dab2d32ca6a726f46e4af1624930c3f1fe07765f6064610f7c8460136131ab565b610fce73640886117801f6fd8abbcee14ce568dadb53aea6826125ea565b506001600955565b610cba83838360405180602001604052806000815250611e31565b6008546001600160a01b031633146110395760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff19169055565b6008546001600160a01b0316331461108f5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b610cba60178383612cc4565b600e54610100900460ff166110f25760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d03565b611168828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506019546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b6040516020818303038152906040528051906020012061268d565b6111c35760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d03565b600083116112135760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d03565b600f54836112203361216d565b61122a919061317f565b11156112945760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b601154336000908152600a60205260409020546112b290859061317f565b11156113265760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d03565b6013546001546000548591900360001901611341919061317f565b111561139d5760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d03565b6015546113aa90846131ab565b3410156113f95760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d03565b336000908152600a60205260408120805485929061141890849061317f565b90915550610cba905033846123e0565b6000611433826126a3565b5192915050565b6008546001600160a01b031633146114825760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6001600160a01b0382166000908152600d6020526040812080548392906114aa90849061317f565b9091555050604080518281526001600160a01b03841660208201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a15050565b6008546001600160a01b0316331461153c5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601255565b6008546001600160a01b031633146115895760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff191662010101179055565b60006001600160a01b0382166115c5576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6008546001600160a01b031633146116335760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b61163d60006127cc565b565b6008546001600160a01b031633146116875760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601955565b6008546001600160a01b031633146116d45760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff191662010000179055565b6040805160608101825260008082526020820181905291810191909152610b55826126a3565b6008546001600160a01b031633146117555760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601055565b606060038054610b6a9061320d565b600e5462010000900460ff166117cc5760405162461bcd60e51b815260206004820152602260248201527f5075626c69632073616c65206d7573742062652061637469766520746f206d696044820152611b9d60f21b6064820152608401610d03565b6000811161181c5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d03565b6012548111156118945760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e7420746f6f206d616e60448201527f7920696e20612073696e676c65207472616e73616374696f6e000000000000006064820152608401610d03565b600f54816118a13361216d565b6118ab919061317f565b11156119155760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b6013546001546000548391900360001901611930919061317f565b111561198c5760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d03565b60165461199990826131ab565b3410156119e85760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d03565b6119f233826123e0565b50565b6001600160a01b038216331415611a1f5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600e5460ff16611ae75760405162461bcd60e51b815260206004820152602160248201527f4f472050726573616c65206d7573742062652061637469766520746f206d696e6044820152601d60fa1b6064820152608401610d03565b611b46828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506018546040516bffffffffffffffffffffffff193360601b166020820152909250603401905061114d565b611bb85760405162461bcd60e51b815260206004820152602f60248201527f496e76616c6964204f472070726f6f66202d2043616c6c6572206e6f74206f6e60448201527f204f472077686974656c697374656400000000000000000000000000000000006064820152608401610d03565b60008311611c145760405162461bcd60e51b815260206004820152602360248201527f53656e64657220697320747279696e6720746f206d696e74207a65726f20746f60448201526235b2b760e91b6064820152608401610d03565b600f5483611c213361216d565b611c2b919061317f565b1115611c955760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d03565b601054336000908152600b6020526040902054611cb390859061317f565b1115611d275760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d03565b6013546001546000548591900360001901611d42919061317f565b1115611db65760405162461bcd60e51b815260206004820152603160248201527f5468697320776f756c642065786365656420746865206d6178206e756d62657260448201527f206f66206d696e747320616c6c6f7765640000000000000000000000000000006064820152608401610d03565b601454611dc390846131ab565b341015611e125760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820657468657220746f206d696e7400000000000000006044820152606401610d03565b336000908152600b60205260408120805485929061141890849061317f565b611e3c8484846123fa565b6001600160a01b0383163b15158015611e5e5750611e5c8484848461282b565b155b15611e7c576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6008546001600160a01b03163314611eca5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600e805462ffffff19166001179055565b6008546001600160a01b03163314611f235760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601555565b6060611f338261233e565b611f5057604051630a14c4b560e41b815260040160405180910390fd5b6000611f5a612923565b9050805160001415611f7b5760405180602001604052806000815250611fa6565b80611f8584612932565b604051602001611f969291906130bd565b6040516020818303038152906040525b9392505050565b6008546001600160a01b03163314611ff55760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601355565b60015460008054606092600019910301908167ffffffffffffffff81111561203257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561205b578160200160208202803683370190505b5090506000805b838110156120e2576000612075826126a3565b9050866001600160a01b031681600001516001600160a01b031614156120cf57818484815181106120b657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826120cb81613248565b9350505b50806120da81613248565b915050612062565b5090949350505050565b6008546001600160a01b031633146121345760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6008546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156119f2573d6000803e3d6000fd5b6001600160a01b03811660009081526005602052604081205468010000000000000000900467ffffffffffffffff16610b55565b6008546001600160a01b031633146121e95760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b6001600160a01b03811661224e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d03565b6119f2816127cc565b6008546001600160a01b0316331461229f5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601655565b6008546001600160a01b031633146122ec5760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b600f55565b6008546001600160a01b031633146123395760405162461bcd60e51b815260206004820181905260248201526000805160206132d08339815191526044820152606401610d03565b601455565b600081600111158015612352575060005482105b8015610b55575050600090815260046020526040902054600160e01b900460ff161590565b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610d66828260405180602001604052806000815250612a64565b6000612405826126a3565b9050836001600160a01b031681600001516001600160a01b03161461243c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061245a575061245a8533610a2e565b8061247557503361246a84610bed565b6001600160a01b0316145b90508061249557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166124bc57604051633a954ecd60e21b815260040160405180910390fd5b6124c860008487612377565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661259e57600054821461259e578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612637576040519150601f19603f3d011682016040523d82523d6000602084013e61263c565b606091505b5050905080610cba5760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610d03565b60008261269a8584612a71565b14949350505050565b604080516060810182526000808252602082018190529181019190915281806001111580156126d3575060005481105b156127b357600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161515918101829052906127b15780516001600160a01b031615612747579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff16151592810192909252156127ac579392505050565b612747565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906128609033908990889088906004016130ec565b602060405180830381600087803b15801561287a57600080fd5b505af19250505080156128aa575060408051601f3d908101601f191682019092526128a791810190612f6c565b60015b612905573d8080156128d8576040519150601f19603f3d011682016040523d82523d6000602084013e6128dd565b606091505b5080516128fd576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606060178054610b6a9061320d565b6060816129565750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612980578061296a81613248565b91506129799050600a83613197565b915061295a565b60008167ffffffffffffffff8111156129a957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156129d3576020820181803683370190505b5090505b841561291b576129e86001836131ca565b91506129f5600a86613263565b612a0090603061317f565b60f81b818381518110612a2357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612a5d600a86613197565b94506129d7565b610cba8383836001612af3565b600081815b8451811015612aeb576000858281518110612aa157634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311612ac75760008381526020829052604090209250612ad8565b600081815260208490526040902092505b5080612ae381613248565b915050612a76565b509392505050565b6000546001600160a01b038516612b1c57604051622e076360e81b815260040160405180910390fd5b83612b3a5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015612bec57506001600160a01b0387163b15155b15612c75575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612c3d600088848060010195508861282b565b612c5a576040516368d2bf6b60e11b815260040160405180910390fd5b80821415612bf2578260005414612c7057600080fd5b612cbb565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415612c76575b506000556125e3565b828054612cd09061320d565b90600052602060002090601f016020900481019282612cf25760008555612d38565b82601f10612d0b5782800160ff19823516178555612d38565b82800160010185558215612d38579182015b82811115612d38578235825591602001919060010190612d1d565b50612d44929150612d48565b5090565b5b80821115612d445760008155600101612d49565b80356001600160a01b0381168114612d7457600080fd5b919050565b600060208284031215612d8a578081fd5b611fa682612d5d565b60008060408385031215612da5578081fd5b612dae83612d5d565b9150612dbc60208401612d5d565b90509250929050565b600080600060608486031215612dd9578081fd5b612de284612d5d565b9250612df060208501612d5d565b9150604084013590509250925092565b60008060008060808587031215612e15578081fd5b612e1e85612d5d565b9350612e2c60208601612d5d565b925060408501359150606085013567ffffffffffffffff80821115612e4f578283fd5b818701915087601f830112612e62578283fd5b813581811115612e7457612e746132a3565b604051601f8201601f19908116603f01168101908382118183101715612e9c57612e9c6132a3565b816040528281528a6020848701011115612eb4578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612ee7578182fd5b612ef083612d5d565b915060208301358015158114612f04578182fd5b809150509250929050565b60008060408385031215612f21578182fd5b612f2a83612d5d565b946020939093013593505050565b600060208284031215612f49578081fd5b5035919050565b600060208284031215612f61578081fd5b8135611fa6816132b9565b600060208284031215612f7d578081fd5b8151611fa6816132b9565b60008060208385031215612f9a578182fd5b823567ffffffffffffffff80821115612fb1578384fd5b818501915085601f830112612fc4578384fd5b813581811115612fd2578485fd5b866020828501011115612fe3578485fd5b60209290920196919550909350505050565b60008060408385031215613007578182fd5b82359150612dbc60208401612d5d565b60008060006040848603121561302b578283fd5b83359250602084013567ffffffffffffffff80821115613049578384fd5b818601915086601f83011261305c578384fd5b81358181111561306a578485fd5b8760208260051b850101111561307e578485fd5b6020830194508093505050509250925092565b600081518084526130a98160208601602086016131e1565b601f01601f19169290920160200192915050565b600083516130cf8184602088016131e1565b8351908301906130e38183602088016131e1565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261311e6080830184613091565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561316057835183529284019291840191600101613144565b50909695505050505050565b602081526000611fa66020830184613091565b6000821982111561319257613192613277565b500190565b6000826131a6576131a661328d565b500490565b60008160001904831182151516156131c5576131c5613277565b500290565b6000828210156131dc576131dc613277565b500390565b60005b838110156131fc5781810151838201526020016131e4565b83811115611e7c5750506000910152565b600181811c9082168061322157607f821691505b6020821081141561324257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561325c5761325c613277565b5060010190565b6000826132725761327261328d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146119f257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b3268a135dfe1a77a28d32e899801633ae4f4e2c6b5f38e4014527a85f1167ee64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256)": {
        "notice": "Public mint"
      },
      "mintOGSale(uint256,bytes32[])": {
        "notice": "OG mint"
      },
      "mintWLSale(uint256,bytes32[])": {
        "notice": "Whitelist mint"
      },
      "reserveMint(uint256,address)": {
        "notice": "Reserve mint for founders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3655,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3657,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3659,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3661,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3666,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)3644_storage)"
      },
      {
        "astId": 3671,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)3653_storage)"
      },
      {
        "astId": 3675,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3681,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2728,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "numberOfWLMintsOnAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2732,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "numberOfOGMintsOnAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2736,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2740,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "airdropList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2743,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "OGsaleActive",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2746,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "WLsaleActive",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2749,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "saleActive",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2752,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "ADDRESS_MAX_MINTS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2755,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "ADDRESS_OG_MAX_MINTS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2758,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "ADDRESS_WL_MAX_MINTS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2761,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "PUBLIC_MINT_PER_TX",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2763,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "maxSupply",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2766,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "OGprice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2769,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "WLprice",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2772,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "price",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2775,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "23",
        "type": "t_string_storage"
      },
      {
        "astId": 2778,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "OGMerkleRoot",
        "offset": 0,
        "slot": "24",
        "type": "t_bytes32"
      },
      {
        "astId": 2781,
        "contract": "contracts/txtest.sol:TXtest",
        "label": "WLMerkleRoot",
        "offset": 0,
        "slot": "25",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)3653_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)3653_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)3644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)3644_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)3653_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 3646,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3648,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3650,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3652,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)3644_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3641,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3643,
            "contract": "contracts/txtest.sol:TXtest",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}